
#include <iostream>
#include <fstream>
#include <string>
#include <cassert>

#include <boost/format.hpp>

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/applications-module.h"
#include "ns3/macroflow-module.h"
#include <iomanip>

using namespace ns3;
using namespace boost;

NS_LOG_COMPONENT_DEFINE ("TcpServer");

std::string pathOut = ".";

int
main (int argc, char *argv[])
{
  // Users may find it convenient to turn on explicit debugging
  // for selected modules; the below lines suggest how to do this

  LogComponentEnable ("TcpServer", LOG_LEVEL_INFO);
  //LogComponentEnable ("PointToPointNetDevice", LOG_LEVEL_INFO);
  //LogComponentEnable ("TcpL4Protocol", LOG_LEVEL_ALL);
  //LogComponentEnable ("Config", LOG_LEVEL_ALL);
  //LogComponentEnable ("SfqQueue", LOG_LEVEL_INFO);
  //LogComponentEnable ("RedQueue", LOG_LEVEL_INFO);
  //LogComponentEnable ("Ipv4Interface", LOG_LEVEL_LOGIC);
  //LogComponentEnable ("CoDelQueue", LOG_LEVEL_ALL);
  //LogComponentEnable ("Fq_CoDelQueue", LOG_LEVEL_ALL);
  //LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
  //LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);


  uint32_t N = 4; //number of nodes

  uint32_t    maxPackets = 90;
  uint32_t    pktSize = 1460;
  uint32_t maxBytes = 0;


  Config::SetDefault ("ns3::BulkSendApplication::SendSize", UintegerValue (pktSize));
  Config::SetDefault ("ns3::TcpSocket::SegmentSize", UintegerValue (pktSize));

  // add by tbc
  Config::SetDefault ("ns3::TcpSocket::DelAckCount", UintegerValue (1)); // default: 2
  Config::SetDefault ("ns3::TcpSocketBase::DCTCP", BooleanValue (true)); // default: false
  Config::SetDefault ("ns3::RedQueue::UseCurrent", BooleanValue (true)); // default: false
  Config::SetDefault ("ns3::TcpSocket::ECN", BooleanValue (true));// default: false
  Config::SetDefault ("ns3::RedQueue::NoQueues", UintegerValue (8)); // default: 8
  Config::SetDefault ("ns3::RedQueue::DRR", BooleanValue (false)); // default: true
  GlobalValue::Bind ("ChecksumEnabled", BooleanValue (false)); // otherwise ECN modification lead to a drop in L3
  Config::SetDefault ("ns3::TcpSocket::ConnTimeout", StringValue ("0.5ms"));  // default: 3s
  Config::SetDefault ("ns3::TcpSocketBase::AckDSCP", UintegerValue (Ipv4Header::CS7)); // default: CS0

  NS_LOG_INFO ("Create nodes.");
  NodeContainer clientNodes;
  clientNodes.Create (N);
  InternetStackHelper().Install (clientNodes);
  for(uint32_t i=0; i<N; ++i)
      Names::Add ((format("/Names/Clients/Client%d") % (i+1)).str(), clientNodes.Get (i));

  SwitchHelper sw;
  Names::Add ("/Names/Switch", sw.GetNode());
  sw.SetIngressQueue ("ns3::DropTailQueue",
			"MaxPackets", UintegerValue (maxPackets));
  sw.SetEgressQueue ("ns3::RedQueue",
			"MinTh", DoubleValue (10),
			"MaxTh", DoubleValue (10),
			"QueueLimit",  UintegerValue (maxPackets));
  sw.SetLinkDelay(StringValue ("0.05ms"));
  sw.SetDataRate(StringValue ("1000Mbps"));
  for(uint32_t i = 0;i<N;++i)
	  sw.AddClientNode(clientNodes.Get (i));
  sw.Install();

  std::vector<NodeContainer> nodeAdjacencyList = sw.GetNodeAdjList();
  std::vector<Ipv4InterfaceContainer> interfaceAdjacencyList = sw.GetInterfaceAdjList();

  // TCP single socket application
  uint16_t port = 9;  // well-known echo port number
  BulkSendHelper source ("ns3::TcpSocketFactory",
                         InetSocketAddress (interfaceAdjacencyList[0].GetAddress (1), port));
  // Set the amount of data to send in bytes.  Zero is unlimited.
  source.SetAttribute ("MaxBytes", UintegerValue (maxBytes));
  source.SetAttribute ("TOS", UintegerValue (Ipv4Header::DscpDefault));

  ApplicationContainer sourceApps = source.Install (nodeAdjacencyList[1].Get (1));
  sourceApps.Start (Seconds (0.001));
  sourceApps.Stop (Seconds (1.001));

  //source.SetAttribute ("TOS", UintegerValue (Ipv4Header::CS1));
  ApplicationContainer sourceApps2 = source.Install (nodeAdjacencyList[2].Get (1));
  sourceApps2.Start (Seconds (0.201));
  sourceApps2.Stop (Seconds (0.801));

  //source.SetAttribute ("TOS", UintegerValue (Ipv4Header::CS2));
  ApplicationContainer sourceApps3 = source.Install (nodeAdjacencyList[3].Get (1));
  sourceApps3.Start (Seconds (0.401));
  sourceApps3.Stop (Seconds (0.601));

  PacketSinkHelper sink ("ns3::TcpSocketFactory",
                         InetSocketAddress (Ipv4Address::GetAny (), port));
  ApplicationContainer sinkApps = sink.Install (nodeAdjacencyList[0].Get (1));
  sinkApps.Start (Seconds (0.0));
  sinkApps.Stop (Seconds (2.0));


  //PointToPointHelper pointToPoint;

  //configure tracing
  //AsciiTraceHelper ascii;
  //std::stringstream asciiStr;
  //asciiStr << pathOut << "/tcp-qfp.tr";
  //Ptr<OutputStreamWrapper> stream = ascii.CreateFileStream (asciiStr.str());
  //pointToPoint.EnableAsciiAll (stream);

  //std::stringstream pcapStr;
  //pcapStr << pathOut << "/tcp-qfp";
  //pointToPoint.EnablePcapAll (pcapStr.str());


  NS_LOG_INFO ("Run Simulation.");
  Simulator::Stop (Seconds (5));
  Simulator::Run ();

  Simulator::Destroy ();
  NS_LOG_INFO ("Done.");

  return 0;
}
